@using System.Text
@model Telerik_ForumTeamProject.Models.ViewModels.PagedPostViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Posts";
    Layout = "_Layout";
}

@functions {
    public string Truncate(string value, int maxChars)
    {
        return value.Length <= maxChars ? value : value.Substring(0, maxChars) + "...";
    }
}

<div class="container mx-auto p-6 mt-6 bg-gray-700 shadow-md rounded-lg">
    <header class="flex justify-between items-center mb-3">
        <h2 class="text-3xl font-bold tracking-tight text-white sm:text-4xl">Posts</h2>
        <a href="@Url.Action("Create", "Post")" class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition duration-300">Post</a>
    </header>
    <div class="mb-6">
        <form asp-controller="Post" asp-action="Index" method="get" class="form-inline">
            <div class="flex space-x-4 items-center">
                <input type="text" name="Title" value="@Model.FilterParameters?.Title" placeholder="Search by title" class="form-control bg-gray-800 text-white p-2 rounded-lg w-full" />
                <button type="button" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition duration-300" onclick="toggleFilters()">Filters</button>
                <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-300">Search</button>
            </div>
            <div id="filterOptions" class="mt-4 hidden">
                <div class="card card-body bg-gray-800 text-white">
                    <div class="form-group mb-3">
                        <input type="text" name="UserName" value="@Model.FilterParameters?.UserName" placeholder="User Name" class="form-control bg-gray-800 text-white p-2 rounded-lg w-full" />
                    </div>
                    <div class="form-group mb-3">
                        <input type="text" name="Tag" value="@Model.FilterParameters?.Tag" placeholder="Tag" class="form-control bg-gray-800 text-white p-2 rounded-lg w-full" />
                    </div>
                    <div class="form-group mb-3">
                        <input type="number" name="MinLikes" value="@Model.FilterParameters?.MinLikes" placeholder="Min Likes" class="form-control bg-gray-800 text-white p-2 rounded-lg w-full" />
                    </div>
                    <div class="form-group mb-3">
                        <input type="number" name="MaxLikes" value="@Model.FilterParameters?.MaxLikes" placeholder="Max Likes" class="form-control bg-gray-800 text-white p-2 rounded-lg w-full" />
                    </div>
                    <div class="form-group mb-3">
                        <select name="SortBy" asp-for="FilterParameters.SortBy" class="form-control bg-gray-800 text-white p-2 rounded-lg w-full">
                            <option value="">Sort By</option>
                            <option value="Title">Title</option>
                            <option value="User">User</option>
                            <option value="Likes">Likes</option>
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <select name="SortOrder" asp-for="FilterParameters.SortOrder" class="form-control bg-gray-800 text-white p-2 rounded-lg w-full">
                            <option value="">Order</option>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-300">Apply Filters</button>
                </div>
            </div>
        </form>
    </div>
    <div class="mx-auto mt-10 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 border-t border-gray-600 pt-10 sm:mt-16 sm:pt-16 lg:mx-0 lg:max-w-none lg:grid-cols-3">
        @foreach (var post in Model.Posts)
        {
            var formattedDate = post.PostDate;
            var displayDate = post.PostDate;
            <article class="flex max-w-xl flex-col items-start justify-between bg-gray-800 p-6 rounded-lg shadow-lg relative">
                <div class="flex items-center gap-x-4 text-xs text-gray-400">
                    <time datetime="@formattedDate" class="text-gray-500">@displayDate</time>
                    @if (post.LastModified != null)
                    {
                        <span class="text-xs text-gray-500">(edited)</span>
                    }
                    <a href="#" class="relative z-10 rounded-full bg-gray-50 px-3 py-1.5 font-medium text-gray-600 hover:bg-gray-100">@string.Join(", ", post.Tags)</a>
                </div>
                <div class="group relative mt-3">
                    <h3 class="text-lg font-semibold leading-6 text-white group-hover:text-gray-400">
                        <a asp-controller="Post" asp-action="GetPost" method="get" asp-route-id="@post.id">
                            <span class="absolute inset-0"></span>
                            @Truncate(post.Title, 24)
                        </a>
                    </h3>
                    <p class="mt-2 line-clamp-3 text-sm leading-6 text-gray-300">@Truncate(post.Content, 24)</p>
                </div>
                <div class="relative mt-6 flex items-center gap-x-4">
                    <img src="@post.userProfilePictureURL" alt="" class="h-10 w-10 rounded-full bg-gray-50">
                    <div class="text-sm leading-6">
                        <p class="font-semibold text-white">
                            <a href="@Url.Action("Details", "User", new { username = post.UserName })" class="text-green-500 hover:underline">
                                <span class="absolute inset-0"></span>
                                @post.UserName
                            </a>
                        </p>
                       
                    </div>
                </div>
                <div class="mt-4">
                    <button class="like-button bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-300" data-post-id="@post.id" onclick="toggleLike(@post.id, this)">
                        Like (<span class="like-count">@post.Likes</span>)
                    </button>
                </div>
                @if (post.IsCreator || post.IsAdmin)
                {
                    <div class="absolute top-0 right-0">
                        <button class="text-white px-4 py-2" onclick="toggleMenu(this)">
                            <i class="fa fa-ellipsis-h"></i>
                        </button>
                        <div class="hidden bg-gray-800 text-white rounded-lg shadow-lg">
                            <a href="@Url.Action("Edit", "Post", new { id = post.id })" class="block px-4 py-2">Edit</a>
                            <a href="javascript:void(0);" onclick="confirmDelete(@post.id)" class="block px-4 py-2">Delete</a>
                        </div>
                    </div>
                }
            </article>
        }
    </div>

    <nav aria-label="Page navigation" class="mt-6">
        <ul class="flex justify-center space-x-4">
            @if (Model.PaginationMetadata.HasPrevious)
            {
                <li class="page-item">
                    <a class="page-link bg-gray-800 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-300" href="@Url.Action("Index", new { page = Model.PaginationMetadata.CurrentPage - 1, pageSize = Model.PaginationMetadata.PageSize, Title = Model.FilterParameters?.Title, UserName = Model.FilterParameters?.UserName, Tag = Model.FilterParameters?.Tag, MinLikes = Model.FilterParameters?.MinLikes, MaxLikes = Model.FilterParameters?.MaxLikes, SortBy = Model.FilterParameters?.SortBy, SortOrder = Model.FilterParameters?.SortOrder })">
                        Previous
                    </a>
                </li>
            }
            @if (Model.PaginationMetadata.HasNext)
            {
                <li class="page-item">
                    <a class="page-link bg-gray-800 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-300" href="@Url.Action("Index", new { page = Model.PaginationMetadata.CurrentPage + 1, pageSize = Model.PaginationMetadata.PageSize, Title = Model.FilterParameters?.Title, UserName = Model.FilterParameters?.UserName, Tag = Model.FilterParameters?.Tag, MinLikes = Model.FilterParameters?.MinLikes, MaxLikes = Model.FilterParameters?.MaxLikes, SortBy = Model.FilterParameters?.SortBy, SortOrder = Model.FilterParameters?.SortOrder })">
                        Next
                    </a>
                </li>
            }
        </ul>
    </nav>
</div>

<script>
    function toggleFilters() {
        var filterOptions = document.getElementById("filterOptions");
        filterOptions.classList.toggle("hidden");
    }

    function toggleLike(postId, button) {
        var likeCountSpan = button.querySelector(".like-count");

        fetch(`/Post/ToggleLike`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(postId)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    likeCountSpan.textContent = data.likeCount;
                    button.innerHTML = `Like (<span class="like-count">${data.likeCount}</span>)`;
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function toggleMenu(button) {
        var menu = button.nextElementSibling;
        menu.classList.toggle("hidden");
    }

    function confirmDelete(postId) {
        if (confirm('Are you sure you want to delete this post?')) {
            fetch(`/Post/Delete/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Failed to delete post.');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const authRequiredLinks = document.querySelectorAll('.auth-required');

        authRequiredLinks.forEach(link => {
            link.addEventListener('click', function (event) {
                if (!localStorage.getItem('isAuthenticated')) {
                    event.preventDefault();
                    window.location.href = '/User/Login';
                }
            });
        });

        if (@Html.Raw(User.Identity?.IsAuthenticated.ToString().ToLower())) {
            localStorage.setItem('isAuthenticated', 'true');
        } else {
            localStorage.removeItem('isAuthenticated');
        }
    });
</script>
