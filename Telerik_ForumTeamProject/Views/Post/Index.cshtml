@using System.Text
@model Telerik_ForumTeamProject.Models.ViewModels.PagedPostViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Posts";
    Layout = "_Layout";
}

@functions {
    public string Truncate(string value, int maxChars)
    {
        return value.Length <= maxChars ? value : value.Substring(0, maxChars) + "...";
    }
}

<div class="container mx-auto p-6 mt-6 bg-gray-700 shadow-md rounded-lg">
    <header class="flex justify-between items-center mb-3">
        <h2 class="text-3xl font-bold tracking-tight text-white sm:text-4xl">Posts</h2>
        <a href="@Url.Action("Create", "Post")" class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition duration-300">Post</a>
    </header>
    <div class="mx-auto mt-10 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 border-t border-gray-600 pt-10 sm:mt-16 sm:pt-16 lg:mx-0 lg:max-w-none lg:grid-cols-3">
        @foreach (var post in Model.Posts)
        {
            var formattedDate = post.PostDate;
            var displayDate = post.PostDate;
            <article class="flex max-w-xl flex-col items-start justify-between bg-gray-800 p-6 rounded-lg shadow-lg">
                <div class="flex items-center gap-x-4 text-xs text-gray-400">
                    <time datetime="@formattedDate" class="text-gray-500">@displayDate</time>
                    <a href="#" class="relative z-10 rounded-full bg-gray-50 px-3 py-1.5 font-medium text-gray-600 hover:bg-gray-100">@string.Join(", ", post.Tags)</a>
                </div>
                <div class="group relative mt-3">
                    <h3 class="text-lg font-semibold leading-6 text-white group-hover:text-gray-400">
                        <a asp-controller="Post" asp-action="GetPost" method="get" asp-route-id="@post.id">
                            <span class="absolute inset-0"></span>
                            @Truncate(post.Title, 24)
                        </a>
                    </h3>
                    <p class="mt-2 line-clamp-3 text-sm leading-6 text-gray-300">@Truncate(post.Content, 24)</p> <!-- Limit content to 12 characters -->
                </div>
                <div class="relative mt-6 flex items-center gap-x-4">
                    <img src="https://images.unsplash.com/photo-1519244703995-f4e0f30006d5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt="" class="h-10 w-10 rounded-full bg-gray-50">
                    <div class="text-sm leading-6">
                        <p class="font-semibold text-white">
                            <a href="#">
                                <span class="absolute inset-0"></span>
                                @post.UserName
                            </a>
                        </p>
                        <p class="text-gray-400">Co-Founder / CTO</p>
                    </div>
                </div>
            </article>
        }
    </div>

    <nav aria-label="Page navigation" class="mt-6">
        <ul class="flex justify-center space-x-4">
            @if (Model.PaginationMetadata.HasPrevious)
            {
                <li class="page-item">
                    <a class="page-link bg-gray-800 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-300" href="@Url.Action("Index", new { page = Model.PaginationMetadata.CurrentPage - 1, pageSize = Model.PaginationMetadata.PageSize })">
                        Previous
                    </a>
                </li>
            }
            @if (Model.PaginationMetadata.HasNext)
            {
                <li class="page-item">
                    <a class="page-link bg-gray-800 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-300" href="@Url.Action("Index", new { page = Model.PaginationMetadata.CurrentPage + 1, pageSize = Model.PaginationMetadata.PageSize })">
                        Next
                    </a>
                </li>
            }
        </ul>
    </nav>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const authRequiredLinks = document.querySelectorAll('.auth-required');

        authRequiredLinks.forEach(link => {
            link.addEventListener('click', function (event) {
                if (!localStorage.getItem('isAuthenticated')) {
                    event.preventDefault();
                    window.location.href = '/User/Login';
                }
            });
        });

        if (@Html.Raw(User.Identity?.IsAuthenticated.ToString().ToLower())) {
            localStorage.setItem('isAuthenticated', 'true');
        } else {
            localStorage.removeItem('isAuthenticated');
        }
    });

    document.getElementById('logoutForm')?.addEventListener('submit', function (event) {
        event.preventDefault();
        fetch('@Url.Action("Logout", "User")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]').value
            }
        })
            .then(response => {
                if (response.ok) {
                    localStorage.removeItem('AuthToken');
                    localStorage.removeItem('SessionId');
                    localStorage.removeItem('UserId');
                    localStorage.removeItem('isAuthenticated');
                    window.location.href = '@Url.Action("Index", "Home")';
                } else {
                    alert('Logout failed. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while logging out. Please try again.');
            });
    });
</script>
