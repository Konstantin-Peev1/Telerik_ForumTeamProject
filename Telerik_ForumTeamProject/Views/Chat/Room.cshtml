@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Telerik_ForumTeamProject.Models.ViewModels
@model ChatRoomViewModel

@{
    ViewData["Title"] = Model.ChatRoom.Name;
    var userName = Model.CurrentUser.UserName;
    var userId = Model.CurrentUser.ID;
    var chatRoomId = Model.ChatRoom.Id;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - YourAppName</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="~/css/site.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
</head>
<body class="bg-gray-900 text-gray-100">
    <header class="bg-green-600 p-6 text-center text-white">
        <h1 class="text-4xl font-extrabold uppercase">@Model.ChatRoom.Name</h1>
    </header>
    <div class="container mx-auto p-6 mt-6 bg-gray-800 shadow-md rounded-lg">
        <div class="mb-4">
            <p class="text-lg font-medium">Active Users: <span id="activeUserCount" class="font-bold text-green-500">0</span></p>
        </div>

        <div id="chatMessages" class="bg-gray-700 p-4 rounded-lg h-96 overflow-y-scroll mb-4 flex flex-col-reverse">
            @foreach (var message in Model.ChatRoom.Messages)
            {
                <div class="p-3 bg-gray-600 rounded-lg mb-2 shadow-sm">
                    <strong class="text-green-400">@message.UserName:</strong> <span class="text-gray-200">@message.Message</span>
                    <em class="text-gray-500 text-xs block">@message.Created</em>
                </div>
            }
        </div>

        <form id="sendMessageForm" class="flex flex-col space-y-4">
            <input type="hidden" name="chatRoomId" value="@chatRoomId" />
            <input type="hidden" name="userId" value="@userId" />
            <input type="hidden" name="userName" value="@userName" />
            <textarea name="message" id="messageInput" rows="3" required class="p-4 bg-gray-600 border border-gray-500 rounded-lg shadow-sm text-gray-100 placeholder-gray-400" placeholder="Type your message..."></textarea>
            <button type="submit" class="bg-green-500 text-white p-3 rounded-lg hover:bg-green-700 transition duration-300">Send</button>
        </form>
    </div>
    <footer class="bg-green-600 p-4 mt-6 text-center text-white">
        <p class="text-sm font-bold">&copy; 2023 Sports Chat App</p>
    </footer>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log('DOM fully loaded and parsed');

            const chatRoomId = document.querySelector("input[name='chatRoomId']").value;
            const userName = document.querySelector("input[name='userName']").value;
            const userId = document.querySelector("input[name='userId']").value;
            let sessionId = localStorage.getItem('SessionId');

            if (!sessionId) {
                sessionId = generateSessionId();
                localStorage.setItem('SessionId', sessionId);
            }

            // Function to generate a unique session ID
            function generateSessionId() {
                const array = new Uint8Array(16);
                window.crypto.getRandomValues(array);
                return Array.from(array, byte => ('0' + byte.toString(16)).slice(-2)).join('');
            }

            // Connect to ChatHub
            const chatConnection = new signalR.HubConnectionBuilder()
                .withUrl(`/chathub?chatRoomId=${chatRoomId}&sessionId=${sessionId}`)
                .build();

            chatConnection.on("ReceiveMessage", (user, message) => {
                console.log('Received message:', user, message);
                const msg = document.createElement("div");
                msg.className = "p-3 bg-gray-600 rounded-lg mb-2 shadow-sm";
                msg.innerHTML = `<strong class="text-green-400">${user}:</strong> <span class="text-gray-200">${message}</span> <em class="text-gray-500 text-xs block">${new Date().toLocaleString()}</em>`;
                document.getElementById("chatMessages").prepend(msg);
                document.getElementById("chatMessages").scrollTop = 0; // Auto-scroll to the top
            });

            chatConnection.start()
                .then(() => {
                    console.log('SignalR connected to ChatHub');
                })
                .catch(err => console.error('SignalR connection error:', err.toString()));

            document.getElementById("sendMessageForm").addEventListener("submit", event => {
                event.preventDefault(); // Prevent the default form submission
                console.log('Form submitted');

                const message = document.getElementById("messageInput").value;

                console.log(`User: ${userName}, Message: ${message}, ChatRoomId: ${chatRoomId}, UserId: ${userId}`);

                chatConnection.invoke("SendMessage", parseInt(chatRoomId), parseInt(userId), userName, message)
                    .then(() => {
                        console.log('Message sent');
                    })
                    .catch(err => {
                        console.error('Error sending message:', err.toString());
                        alert(`Error sending message: ${err.toString()}`);
                    });

                document.getElementById("messageInput").value = '';
            });

            // Handle disconnect
            window.addEventListener('beforeunload', function () {
                chatConnection.stop();
            });

            // Connect to UserCountHub for tracking active users
            const userCountConnection = new signalR.HubConnectionBuilder()
                .withUrl(`/usercounthub?chatRoomId=${chatRoomId}&sessionId=${sessionId}`)
                .build();

            userCountConnection.on("UpdateUserCount", (chatRoomId, count) => {
                if (chatRoomId === document.querySelector("input[name='chatRoomId']").value) {
                    document.getElementById("activeUserCount").innerText = count;
                }
            });

            userCountConnection.start()
                .then(() => {
                    console.log('SignalR connected to UserCountHub');
                })
                .catch(err => console.error('SignalR connection error:', err.toString()));

            // Handle disconnect
            window.addEventListener('beforeunload', function () {
                userCountConnection.stop();
            });
        });
    </script>
</body>
</html>
